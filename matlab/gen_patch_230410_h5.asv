% check size
% dataset division is 8:1:1
% for processing standard colony data (230323 + 230407)
% save h5 instead of mat

clear
clc
close all

addpath('/data01/gkim/Matlab_subcodes/gk')

dir_source = '/data02/gkim/stem_cell_jwshin/data/230323_TCF'; % 220822_TCF';%220715_TCF';
%dir_save = '/data02/gkim/stem_cell_jwshin/data/230323_3D'; %220902_3D';%220803_3D';
dir_save = '/data02/gkim/stem_cell_jwshin/data/230323_h5'; %220902_3D';%220803_3D';
dir_img = '/data02/gkim/stem_cell_jwshin/data/230323_PNG';%%230221_PNG'; %220902_PNG';%220803_PNG';

cd(dir_source)
dir_set = dir('0*');
h_ = figure(1);
h_.Position = [0 0 1800 900];
h_.Color = [1 1 1];
h = figure(5);
h.Position = [595 327 950 1000];
h.Color = [1 1 1];

size_pad = 0; %(um)

hours = [0, 12, 24];

for hour = hours

for iter_set = 1:length(dir_set)
    cd(dir_source)
        cd(dir_set(iter_set).name)
    dir_cls = dir('*_*');
    
    if iter_set == 3
        stride = 0.5;%1;
    else
        stride = 0.5;
    end
    
    for iter_cls = 1:length(dir_cls)%1:length(dir_cls)
        
        cd(dir_source)
        cd(dir_set(iter_set).name)
        cd(dir_cls(iter_cls).name)
        dir_mat = dir('2*');
        for iter_stitch = length(dir_mat):-1:1
            
            iter_x = 0;
            iter_y = 0;

            cd(dir_source)
            cd(dir_set(iter_set).name)
            cd(dir_cls(iter_cls).name)
            cd(dir_mat(iter_stitch).name);

            dir_tcf = dir('*.TCF');

            if length(dir_tcf) == 0 
                continue
            end
            
            mkdir([dir_save, '/',...
            	dir_set(iter_set).name, '/',...
            	dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
            
            mkdir([dir_img, '/',...
            	dir_set(iter_set).name, '/',...
            	dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
            

            fname = dir_tcf(1).name;
            idx_dot = strfind(fname, '.');
            fname_save = fname(idx_dot(end-5)+1:idx_dot(end)-1);
            %% comment this if you're fixing the data for the above condition
%             if exist([dir_img, '/', dir_set(iter_set).name, '/',...
%                 dir_cls(iter_cls).name, sprintf('_hr%02d', hour), '/', '00_colony_' fname_save, '.png'])
%                 'skipping... colony data already exist'
%                 continue
%             end
            %%
            info_temp = h5info(fname, '/Info/Device');
            n_m = uint16(info_temp.Attributes(3).Value*10000);
            tomo_stitch = h5read(fname, '/Data/3D/000000');
            tomo_stitch(tomo_stitch == 0) = n_m; 
            info_temp = h5info(fname, '/Data/3D');         
            size_ori = [info_temp.Attributes(7).Value info_temp.Attributes(8).Value info_temp.Attributes(9).Value];
            res_ori = [info_temp.Attributes(2).Value info_temp.Attributes(3).Value info_temp.Attributes(4).Value];

            size_new = [512 512 64];
            size_cen = [384 384 64]; % the s
            % ize that preprocess3d.py will result in

            res_new_ = [0.15 0.15 0.3];
            size_crop = round(size_new.*res_new_./res_ori);

            mipx_stitch = squeeze(max(tomo_stitch, [],1));
            mipz_stitch = max(tomo_stitch, [],3);

            n_thres = 13420; %13370

            count_z = sum(single(mipx_stitch),1);
            z_glass = gradient(count_z);
            z_glass = find(z_glass == max(z_glass));
            z_crop_max = min(z_glass+size_crop(3) - 2, size_ori(3));
            z_crop = [z_crop_max-size_crop(3)+1 z_crop_max];

            mask_stitch = mipz_stitch >= n_thres;
            se = strel('disk', round(2/res_ori(1)));
            mask_stitch = imdilate(mask_stitch,se);
            mask_stitch = imfill(mask_stitch,'holes');
            mask_stitch = imerode(mask_stitch,se);

            mask_stitch = bwlabel(mask_stitch, 4);
            label_colony = mask_stitch(round(size_ori(1)/2), round(size_ori(2)/2));
            if label_colony == 0
                rprop = regionprops(mask_stitch);
                label_colony = find([rprop.Area] == max([rprop.Area]));
            end
            mask_stitch = (mask_stitch==label_colony);

            
            


            
            x_crop_ = find(sum(mask_stitch,2)>0);
            x_crop_ = [max(min(x_crop_)-round(size_pad/res_ori(1)),0) min(max(x_crop_)+round(size_pad/res_ori(1)),size_ori(1))];
            x_crop_ = single(x_crop_);
            
            if x_crop_(1) == 1

                if x_crop_(2) == size_ori(1)
                    num_crop_x = floor((x_crop_(2)-x_crop_(1)+1)/size_crop(1)/stride)*stride;
                else
                    num_crop_x = ceil((x_crop_(2)-x_crop_(1)+1)/size_crop(1)/stride)*stride;
                    if num_crop_x*size_crop(1) > size_ori(1)
                        tomo_stitch = cat(1,tomo_stitch,13370*ones(ceil(num_crop_x*size_crop(1))-size(tomo_stitch,1),size(tomo_stitch,2),size(tomo_stitch,3)));
                        mask_stitch = cat(1,mask_stitch,zeros(ceil(num_crop_x*size_crop(1))-size(mask_stitch,1),size(mask_stitch,2)));
                    end
                end
            else
                if x_crop_(2) == size_ori(1)
                    num_crop_x = ceil((x_crop_(2)-x_crop_(1)+1)/size_crop(1)/stride)*stride;
                    if num_crop_x*size_crop(1) > size_ori(1)
                        tomo_stitch = cat(1,13370*ones(ceil(num_crop_x*size_crop(1))-size(tomo_stitch,1),size(tomo_stitch,2),size(tomo_stitch,3)),tomo_stitch);
                        mask_stitch = cat(1,zeros(ceil(num_crop_x*size_crop(1))-size(mask_stitch,1),size(mask_stitch,2)),mask_stitch);
                    end
                else
                    num_crop_x = ceil((x_crop_(2)-x_crop_(1)+1)/size_crop(1)/stride)*stride;%+1;
                    if num_crop_x*size_crop(1) > size_ori(1)
                        tomo_stitch = cenpad2d(tomo_stitch, ceil(num_crop_x*size_crop(1)),size(tomo_stitch,2), 13370);
                        mask_stitch = cenpad2d(mask_stitch, ceil(num_crop_x*size_crop(1)),size(mask_stitch,2), 0);
                    end
                end

            end

               
            
            y_crop_ = find(sum(mask_stitch,1)>0);
            y_crop_ = [max(min(y_crop_)-round(size_pad/res_ori(1)),0) min(max(y_crop_)+round(size_pad/res_ori(1)),size_ori(2))];
            y_crop_ = single(y_crop_);
            
            if y_crop_(1) == 1

                if y_crop_(2) == size_ori(2)
                    num_crop_y = floor((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                else
                    num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                    if num_crop_y*size_crop(2) > size_ori(2)
                        tomo_stitch = cat(2,tomo_stitch,13370*ones(size(tomo_stitch,2),ceil(num_crop_y*size_crop(2))-size(tomo_stitch,2),size(tomo_stitch,3)));
                        mask_stitch = cat(2,mask_stitch,zeros(size(mask_stitch,2),ceil(num_crop_y*size_crop(2))-size(mask_stitch,2)));
                    end
                end
            else
                if y_crop_(2) == size_ori(2)
                    num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                    if num_crop_y*size_crop(2) > size_ori(2)
                        tomo_stitch = cat(2,13370*ones(size(tomo_stitch,1), ceil(num_crop_y*size_crop(2))-size(tomo_stitch,2),size(tomo_stitch,3)),tomo_stitch);
                        mask_stitch = cat(2,zeros(size(mask_stitch,1), ceil(num_crop_y*size_crop(2))-size(mask_stitch,2)),mask_stitch);
                    end
                else
                    num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;%+1;
                    if num_crop_y*size_crop(2) > size_ori(2)
                        tomo_stitch = cenpad2d(tomo_stitch, size(tomo_stitch,1), ceil(num_crop_y*size_crop(2)), 13370);
                        mask_stitch = cenpad2d(mask_stitch, size(mask_stitch,1), ceil(num_crop_y*size_crop(2)), 0);
                    end
                end

            end
            
            tomo_stitch = cenpad2d(tomo_stitch,size(tomo_stitch,1)+size_crop(1)+10,size(tomo_stitch,2)+size_crop(2)+10,13370);
            mask_stitch = cenpad2d(mask_stitch,size(mask_stitch,1)+size_crop(1)+10,size(mask_stitch,2)+size_crop(2)+10,0);
            
            
            set(0, 'CurrentFigure', h_), hold off
            subplot(1,2,1), imagesc(max(tomo_stitch,[],3), [13370 13800]), axis image, colormap gray
            subplot(1,2,2), imagesc(mask_stitch, [0 1]), axis image, colormap gray
            cd([dir_img, '/',...
                        dir_set(iter_set).name, '/',...
                        dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
            
            

            x_crop_ = find(sum(mask_stitch,2)>0);
            x_crop_ = [min(x_crop_) max(x_crop_)];
            
            if mean(x_crop_) > floor(size(mask_stitch,1)/2+1)
                x_crop_max = min(size(tomo_stitch,1), floor(mean(x_crop_))+floor(num_crop_x*size_crop(1)/2));
                x_crop = [x_crop_max - num_crop_x*size_crop(1)+1 x_crop_max];
            else
                x_crop_min = max(1, floor(mean(x_crop_))-ceil(num_crop_x*size_crop(1)/2))+1;
                x_crop = [x_crop_min x_crop_min + num_crop_x*size_crop(1)-1];
            end
            
            num_x = ceil((x_crop_(2)-x_crop_(1)+1-stride/size_crop(1)/2)/stride/size_crop(1))+1;
            
            
            x_start0 = ceil((x_crop_(1)+x_crop_(2))/2+0.5)-floor(0.5*ceil(num_x*stride*size_crop(1))+0.5);

            xs_start_ = round(x_start0+((1:num_x)-1)*stride*size_crop(1));
            while xs_start_(end)+size_crop(1) > size(tomo_stitch,1)
                xs_start_(end) = [];
            end
            while xs_start_(1) < 1
                xs_start_(1) = [];
            end
            
            for iter_x = length(xs_start_):-1:1
                x_start = xs_start_(iter_x);%round(x_crop(1)+(iter_x-1)*size_crop(1)*stride);
                x_end = x_start+size_crop(1)-1;
                %x_end = round(x_crop(1)+(iter_x-1)*size_crop(1)*stride)+size_crop(1)-1;


                mask_stitch_x = mask_stitch;
                mask_stitch_x(1:x_start-1,:) = 0;
                mask_stitch_x(x_end+1:end,:) = 0;
                y_crop_ = find(sum(mask_stitch_x,1)>0);

                if length(y_crop_) < 2
                    continue
                end


                y_crop_ = [max(min(y_crop_)-round(size_pad/res_ori(1)),0) min(max(y_crop_)+round(size_pad/res_ori(1)),size_ori(2))];
                
                
                if y_crop_(1) == 1
                    if y_crop_(2) == size_ori(2)
                        num_crop_y = floor((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                    else
                        num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                    end
                else
                    if y_crop_(2) == size_ori(2)
                        num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;
                    else
                        num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2)/stride)*stride;%+1;
                    end
                end
                
                num_crop_y = ceil((y_crop_(2)-y_crop_(1)+1)/size_crop(2));

                if mean(y_crop_) > floor(size(mask_stitch,2)/2+1)
                   y_crop_max = min(size(tomo_stitch,2), floor(mean(y_crop_))+floor(num_crop_y*size_crop(2)/2));
                   y_crop = [y_crop_max - num_crop_y*size_crop(2)+1 y_crop_max];
                else
                   y_crop_min = max(1, floor(mean(y_crop_)) - ceil(num_crop_y*size_crop(2)/2));
                   y_crop = [y_crop_min y_crop_min + num_crop_y*size_crop(2)-1];
                end
                y_crop_ = single(y_crop_);
                    
           
                %num_y = ceil((y_crop_(2)-y_crop_(1)+1)/stride/size_crop(2))+1;
                num_y = ceil((y_crop_(2)-y_crop_(1)+1-stride/size_crop(2)/2)/stride/size_crop(2))+1;
                
                y_start0 = ceil((y_crop_(1)+y_crop_(2))/2+0.5)-floor(0.5*ceil(num_y*stride*size_crop(2))+0.5);

                ys_start_ = round(y_start0+((1:num_y)-1)*stride*size_crop(2));
                
                while ys_start_(end)+size_crop(2) > size(tomo_stitch,2)
                    ys_start_(end) = [];
                end
                while ys_start_(1) < 1
                    ys_start_(1) = [];
                end
                
                for iter_y = 1:length(ys_start_)%num_crop_y/stride-(1/stride-1)

                    y_start = ys_start_(iter_y);%round(y_crop(1)+(iter_y-1)*size_crop(2)*stride);
                    y_end = y_start+size_crop(2)-1;%round(y_crop(1)+(iter_y-1)*size_crop(2)*stride)+size_crop(2)-1;
                    z_start = z_crop(1);
                    z_end = z_crop(2);
                    
                    score_mask = mask_stitch(x_start:x_end,y_start:y_end);
                    score_mask = cencrop2d(score_mask,size_cen(1),size_cen(2));
                    if sum(sum(score_mask)) < 1/9*size_cen(1)*size_cen(2)
                        'patch unsuitable due to the data coverage'
                        try
                            cd([dir_save, '/',...
                            dir_set(iter_set).name, '/',...
                            dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
                            delete([fname_save, sprintf('_%02d_%02d.mat',iter_x, iter_y)]);
    
                            cd([dir_img, '/',...
                            dir_set(iter_set).name, '/',...
                            dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
                            delete([fname_save, sprintf('_%02d_%02d.png',iter_x, iter_y)]);
                        end
                        continue
                    end
                    
                    %% comment this if you're fixing the data for the above condition
                    tomo = single(tomo_stitch(x_start:x_end,y_start:y_end,z_start:z_end))/10000;
                    
                    cd([dir_save, '/',...
                        dir_set(iter_set).name, '/',...
                        dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
                    
                    data = imresize3(tomo,size_new, 'linear');
                    res_new = (res_ori.*size_crop)./size_new;
                    resx = res_new(1);
                    resy = res_new(2);
                    resz = res_new(3);
                    
                    %% save mat
                    %save([fname_save, sprintf('_%02d_%02d.mat',iter_x, iter_y)],...
                    %    'data', 'resx', 'resy', 'resz','fname','x_start','x_end',...
                    %    'y_start','y_end','z_start','z_end','-v7.3');
                    
                    %% save h5
                    h5create([fname_save, sprintf('_%02d_%02d.h5',iter_x, iter_y)],...
                        '/ri', [size(ri_rs_norm,1) size(ri_rs_norm,2)]);
                    h5write(replace(fname_TCF,'.TCF', sprintf('_%03d.h5',iter_z)),...
                        '/ri', ri_rs_norm(:,:,iter_z));
                    h5create(replace(fname_TCF,'.TCF', sprintf('_%03d.h5',iter_z)),...
                        '/fl', [size(fl_rs_norm,2), 1, size(fl_rs_norm,1)]);
                    h5write(replace(fname_TCF,'.TCF', sprintf('_%03d.h5',iter_z)),...
                        '/fl', permute(fl_rs_norm(:,:,iter_z), [2 3 1]));
                    %%

                    cd([dir_img, '/',...
                        dir_set(iter_set).name, '/',...
                        dir_cls(iter_cls).name, sprintf('_hr%02d', hour)]);
                    set(0, 'CurrentFigure', h)
                    subplot(2,2,1), imagesc(max(data,[],3), [1.337 1.38]),axis image, colormap gray
                    title('MIP - XY')
                    subplot(2,2,2), imagesc(squeeze(max(data,[],2)), [1.337 1.38]),axis image, colormap gray
                    title('MIP - YZ')
                    colorbar
                    subplot(2,2,3), imagesc(squeeze(max(data,[],1))', [1.337 1.38]),axis image, colormap gray
                    title('MIP - XZ')
                    subplot(2,2,4), imagesc(max(tomo_stitch,[],3), [13370 13800]), axis image, colormap gray
                    subplot(2,2,4), hold on
                    plot([y_start,y_end], [x_start,x_start],'r-')
                    plot([y_start,y_end],[x_end,x_end], 'r-')
                    plot([y_start,y_start],[x_start,x_end], 'r-')
                    plot([y_end,y_end],[x_start,x_end], 'r-')
                    title(fname_save)
                    drawnow
                    
                    pause(0.1)
                    hold off
                    
                    saveas(h, [fname_save, sprintf('_%02d_%02d.png',iter_x, iter_y)])
                    
                    set(0, 'CurrentFigure', h_),subplot(1,2,2),hold on
                    plot([y_start,y_end], [x_start,x_start],'r-')
                    plot([y_start,y_end],[x_end,x_end], 'r-')
                    plot([y_start,y_start],[x_start,x_end], 'r-')
                    plot([y_end,y_end],[x_start,x_end], 'r-')
                    saveas(h_, ['00_colony_' fname_save, '.png'])
                    %%
                                    
                end
            end
            saveas(h_, ['00_colony_' fname_save, '.png'])
        end
    end
    
end

end