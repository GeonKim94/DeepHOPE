dir_feat = '/data02/gkim/stem_cell_jwshin/data/220623_feature';
cd(dir_feat)
dir_set = dir('0*');

features = [];
classes = [];
sets = [];

for iter_set = 1:length(dir_set)
    cd(dir_feat)
    cd(dir_set(iter_set).name)
    dir_cls = dir('0*');
    
    for iter_cls = 1:length(dir_cls)
        cd(dir_feat)
        cd(dir_set(iter_set).name)
        cd(dir_cls(iter_cls).name)
        dir_data = dir('20*');
        
        for iter_data = 1:length(dir_data)
            
            cd(dir_feat)
            cd(dir_set(iter_set).name)
            cd(dir_cls(iter_cls).name)
            
            load(dir_data(iter_data).name);
            features = [features; [nc_ratio ncont_bound smoothness]];
            classes = [classes; iter_cls];
            sets = [sets; iter_set];
        end
        
    end
end


features_train = features(find(sets == 1),:);
classes_train = classes(find(sets == 1),:);
features_test = features(find(sets == 2),:);
classes_test = classes(find(sets == 2),:);
%% simple plot
close all

figure(21), hold on
Xs = ones(sum(classes == 1),1)+0.05*randn(sum(classes == 1),1);
Ys = features(find(classes == 1), 1);
plot(Xs, Ys, 'k.');
errorbar(1.3, mean(Ys), std(Ys,0,1),'k');
find(
Xs = 2*ones(sum(classes == 2),1)+0.05*randn(sum(classes == 2),1);
Ys = features(find(classes == 2), 1);
errorbar(2.3, mean(Ys), std(Ys,0,1),'k');
plot(Xs, Ys, 'k.');
xlim([0 3]);
title('Pseudo-NCRatio');

figure(22), hold on
Xs = ones(sum(classes == 1),1)+0.05*randn(sum(classes == 1),1);
Ys = features(find(classes == 1), 2);
plot(Xs, Ys, 'k.');
Xs = 2*ones(sum(classes == 2),1)+0.05*randn(sum(classes == 2),1);
Ys = features(find(classes == 2), 2);
plot(Xs, Ys, 'k.');
xlim([0 3]);
title('Boundary contrast');

figure(23), hold on
Xs = ones(sum(classes == 1),1)+0.05*randn(sum(classes == 1),1);
Ys = features(find(classes == 1), 3);
plot(Xs, Ys, 'k.');
Xs = 2*ones(sum(classes == 2),1)+0.05*randn(sum(classes == 2),1);
Ys = features(find(classes == 2), 3);
plot(Xs, Ys, 'k.');
xlim([0 3]);
title('Boundary smoothness');

%% normalize
features_train_mean = mean(features_train,1);
features_train_std = std(features_train,0,1);

features_train = (features_train-features_train_mean)./features_train_std;
features_test = (features_test-features_train_mean)./features_train_std;



%% KNN
accs_knn = [];

for numnei = 1:20
    mdl_knn = fitcknn(features_train,classes_train,'NumNeighbors',numnei,'Standardize',0);
    classes_test_ = predict(mdl_knn,features_test);
    accs_knn = [accs_knn; sum((classes_test_-classes_test)==0)/length(classes_test_)];
end


