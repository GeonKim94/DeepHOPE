%% find the best epoch based on line validation

close all
clear
clc
addpath(genpath('/data01/gkim/Matlab_subcodes/'))

save_fig =true;
save_png =true;


dir_out0 = '/data02/gkim/stem_cell_jwshin/outs';
dir_out = [dir_out0 '/' ...
    '23_SEC1H5_wider_v3_24h_GM_germline_fishdeep1_b012_in_lr0.001'];
dir_outi = [dir_out '_testiPSC'];

epochs = [];
accs_tr = [];
accs_va = [];
accs_te = [];

cd(dir_out)
list_mdl = dir('epoch*]');

for iter_mdl = 1:length(list_mdl)
    cd(dir_out)

    name_mdl = list_mdl(iter_mdl).name;
    idxs_lbra = strfind(name_mdl,'[');
    epochs = [epochs; str2num(name_mdl(idxs_lbra(1)+1:idxs_lbra(1)+5))];
    accs_tr = [accs_tr; str2num(name_mdl(idxs_lbra(2)+1:idxs_lbra(2)+5))];
    accs_va = [accs_va; str2num(name_mdl(idxs_lbra(3)+1:idxs_lbra(3)+5))];
    accs_te = [accs_te; str2num(name_mdl(idxs_lbra(4)+1:idxs_lbra(4)+5))];


    
    metrics = accs_va;%+accs_tr;
    idx_bestmdl = min(find(metrics == max(metrics)));
    dir_bestmdl = list_mdl(idx_bestmdl).name;
        idxs_lbra = strfind(dir_bestmdl,'[');
    epoch_bestmdl_str = (dir_bestmdl(idxs_lbra(1)+1:idxs_lbra(1)+5));
end

targets_test = [];
scores_test = [];
feats_test = [];
paths_test = {};
%% get line test result

cd(dir_out)
dir_bestmdl = dir(['epoch[' epoch_bestmdl_str '*]']);
dir_bestmdl = dir_bestmdl(1).name;
cd(dir_bestmdl)

load('result_test')


targets = single(targets);
test_wholesize = length(paths);
scores_test = [scores_test; reshape(scores, [length(scores)/(test_wholesize), test_wholesize])'];
feats = cell2mat(feats)';
feats_test = [feats_test; reshape(feats, [length(feats)/(test_wholesize), test_wholesize])'];
paths_test = [paths_test; paths'];
targets_test = [targets_test; single(targets')];

for iter_data = 1:length(targets_test)
    preds_test(iter_data) = find(scores_test(iter_data,:) == max(scores_test(iter_data,:)));
end
preds_test = preds_test-1;

%% actually not test
cd(dir_out)
dir_bestmdl = dir(['epoch[' epoch_bestmdl_str '*]']);
dir_bestmdl = dir_bestmdl(1).name;
cd(dir_bestmdl)

load('result_valid')


targets = single(targets);
test_wholesize = length(paths);
scores_test = [scores_test; reshape(scores, [length(scores)/(test_wholesize), test_wholesize])'];
feats = cell2mat(feats)';
feats_test = [feats_test; reshape(feats, [length(feats)/(test_wholesize), test_wholesize])'];
paths_test = [paths_test; paths'];
targets_test = [targets_test; single(targets')];

for iter_data = 1:length(targets_test)
    preds_test(iter_data) = find(scores_test(iter_data,:) == max(scores_test(iter_data,:)));
end
preds_test = preds_test-1;
        
%% actually not test
cd(dir_out)
dir_bestmdl = dir(['epoch[' epoch_bestmdl_str '*]']);
dir_bestmdl = dir_bestmdl(1).name;
cd(dir_bestmdl)

load('result_train')


targets = single(targets);
test_wholesize = length(paths);
scores_test = [scores_test; reshape(scores, [length(scores)/(test_wholesize), test_wholesize])'];
feats = cell2mat(feats)';
feats_test = [feats_test; reshape(feats, [length(feats)/(test_wholesize), test_wholesize])'];
paths_test = [paths_test; paths'];
targets_test = [targets_test; single(targets')];

for iter_data = 1:length(targets_test)
    preds_test(iter_data) = find(scores_test(iter_data,:) == max(scores_test(iter_data,:)));
end
preds_test = preds_test-1;
        
% %% get iPSC test_result (skip)
% 
% cd(dir_outi)
% dir_bestmdl = dir(['epoch[' epoch_bestmdl_str '*]']);
% dir_bestmdl = dir_bestmdl(1).name;
% cd(dir_bestmdl)
% 
% load('result_test')
% 
% targets = single(targets);
% test_wholesize = length(paths);
% scores_test = [scores_test; reshape(scores, [length(scores)/(test_wholesize), test_wholesize])'];
% feats = cell2mat(feats)';
% feats_test = [feats_test; reshape(feats, [length(feats)/(test_wholesize), test_wholesize])'];
% paths_test = [paths_test; paths'];
% targets_test = [targets_test; single(targets')];

%%

preds_test = -ones(size(targets_test));
for iter_data = 1:length(targets_test)
    preds_test(iter_data) = find(scores_test(iter_data,:) == max(scores_test(iter_data,:)));
end
preds_test = preds_test-1;

lines_test = zeros(size(targets_test)); % represents plot location and (potentially) markers 
types_test = zeros(size(targets_test)); % represents the color
for iter_data = 1:length(targets_test)
    fname = paths_test{iter_data};
    idx_slash = strfind(fname,'/');
    fname = fname(idx_slash(end)+1:end);
    if contains(fname, 'GM') || contains(fname, 'gm') || contains(fname, '230719.')  || contains(fname, '230720.') 
        if contains(fname, 'Endo') && contains(fname,{'12h', '12H'})
            lines_test(iter_data) = 2;
            types_test(iter_data) = 2;
        elseif contains(fname, 'Endo') && contains(fname,{'24h', '24H'})
            lines_test(iter_data) = 3;
            types_test(iter_data) = 3;
        elseif contains(fname,'Meso') && contains(fname,{'12h', '12H'})
            lines_test(iter_data) = 4;
            types_test(iter_data) = 4;
        elseif contains(fname,'Meso') && contains(fname,{'24h', '24H'})
            lines_test(iter_data) = 5;
            types_test(iter_data) = 5;
        elseif contains(fname,'Ecto') && contains(fname,{'12h', '12H'})
            lines_test(iter_data) = 6;
            types_test(iter_data) = 6;
        elseif contains(fname,'Ecto') && contains(fname,{'24h', '24H'})
            lines_test(iter_data) = 7;
            types_test(iter_data) = 7;
        else
            lines_test(iter_data) = 1;
            types_test(iter_data) = 1;
        end

    elseif contains(fname, '.A2.') || contains(fname, 'A2_')
        lines_test(iter_data) = 7;%7;
        types_test(iter_data) = 3;
    elseif contains(fname, '.A12.') || contains(fname, 'A12_')
        lines_test(iter_data) = 8;%8;
        types_test(iter_data) = 3;
    elseif contains(fname, '.A19.') || contains(fname, 'A19_')
        lines_test(iter_data) = 9;
        types_test(iter_data) = 4;
    elseif contains(fname, '.A20.') || contains(fname, 'A20_')
        lines_test(iter_data) = 10;
        types_test(iter_data) = 4;
    elseif contains(fname, '.B1.') || contains(fname, 'B1_')
        lines_test(iter_data) = 12;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B7.') || contains(fname, 'B7_')
        lines_test(iter_data) = 13;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B12.') || contains(fname, 'B12_')
        lines_test(iter_data) = 14;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B13.') || contains(fname, 'B13_')
        lines_test(iter_data) = 15;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B17.') || contains(fname, 'B17_')
        lines_test(iter_data) = 16;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B18.') || contains(fname, 'B18_')
        lines_test(iter_data) = 17;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B21.') || contains(fname, 'B21_')
        lines_test(iter_data) = 18;
        types_test(iter_data) = 3;
    elseif contains(fname, '.B23.') || contains(fname, 'B23_')
        lines_test(iter_data) = 19;
        types_test(iter_data) = 3;
    elseif contains(fname, '.HD02.') || contains(fname, 'HD02_')
        lines_test(iter_data) = 21;
        types_test(iter_data) = 3;%4%
    elseif contains(fname, '.HD03.') || contains(fname, 'HD03_')
        lines_test(iter_data) = 22;
        types_test(iter_data) = 3;
    elseif contains(fname, '.HD05.') || contains(fname, 'HD05_')
        lines_test(iter_data) = 23;
        types_test(iter_data) = 3;%4%
    elseif contains(fname, '.HD09.') || contains(fname, 'HD09_')
        lines_test(iter_data) = 24;
        types_test(iter_data) = 3;
    elseif contains(fname, '.HD11.') || contains(fname, 'HD11_')
        lines_test(iter_data) = 25;
        types_test(iter_data) = 3;
    elseif contains(fname, '.HD12.') || contains(fname, 'HD12_')
        lines_test(iter_data) = 26;
        types_test(iter_data) = 3;%4%
    elseif contains(fname, '.HD14.') || contains(fname, 'HD14_')
        lines_test(iter_data) = 27;
        types_test(iter_data) = 3;%4%
    elseif contains(fname, '.HD15.') || contains(fname, 'HD15_')
        lines_test(iter_data) = 28;
        types_test(iter_data) = 3;
    elseif contains(fname, '.HD25.') || contains(fname, 'HD25_')
        lines_test(iter_data) = 29;
        types_test(iter_data) = 3;
    else
        continue
        error('No line found')
    end

end

%% t-SNE

colors_type = [0 0 0;...
    y1 1 0;...
    1 1 0;...
    0 1 1;...
    0 1 1;...
    1 0 1;...
    1 0 1];

for perp = 15:15:150

feats_tsne_ = tsne(feats_test(types_test<8,:), 'Perplexity', perp, 'Standardize',true,'LearnRate',250);


%% if 12h is type 1.5


for type_ = unique(types_test(find((types_test>0).*(types_test <8))))'

% 
%     if line_ == 0 
%         continue
%     end

    h_fig = figure(perp);
    h_fig.Position = [0 0 900 900];
    h_fig.Color = [0.75 0.75 0.75];
    hold on

%     idxs_thisline = find(lines_test == line_);

%     type_ = types_test(idxs_thisline(1));
idxs_thistype = find(types_test == type_);

    if type_/2 == round(type_/2) || type_ == 1
        color_ = colors_type(type_,:);
        marker_ = 'o';
        size_ = 7.5;
    else
        color_ = colors_type(type_,:);
        marker_ = '.';
        size_ = 15;
%         color_ = colors_type(floor(type_),:)+colors_type(ceil(type_),:);
%         color_ = color_/2;
    end



    plot(feats_tsne_(idxs_thistype,1),feats_tsne_(idxs_thistype,2), marker_,...
        'MarkerSize', size_, 'Color', color_)

    ylim([min(feats_tsne_(:,2)) max(feats_tsne_(:,2))])
    xlim([min(feats_tsne_(:,1)) max(feats_tsne_(:,1))])
    
    

end
set(gcf,'color',[0.75 0.75 0.75])
axis image
axis off
end



%% UMAP


colors_type = [0 0 0;...
    1 1 0;...
    1 1 0;...
    0 1 1;...
    0 1 1;...
    1 0 1;...
    1 0 1];


for perp = [30 45 60 75]


[reduction, umap, clusterIdentifiers, extras]=run_umap(feats_test(types_test<8,:),...
    'min_dist', 0.1, 'n_neighbors', perp, 'verbose', 'none');
% feats_tsne_ = tsne(feats_test(types_test<3,:), 'Perplexity', perp, 'Standardize',true,'LearnRate',250);


%% if 12h is type 1.5



for type_ = unique(types_test(find((types_test>0).*(types_test <8))))'

% 
%     if line_ == 0 
%         continue
%     end

    h_fig = figure(1000+ perp);
    h_fig.Position = [0 0 900 900];
    h_fig.Color = [0.75 0.75 0.75];
    hold on

%     idxs_thisline = find(lines_test == line_);

%     type_ = types_test(idxs_thisline(1));
idxs_thistype = find(types_test == type_);

    if type_/2 == round(type_/2) || type_ == 1
        color_ = colors_type(type_,:);
        marker_ = 'o';
        size_ = 7.5;
    else
        color_ = colors_type(type_,:);
        marker_ = '.';
        size_ = 15;
%         color_ = colors_type(floor(type_),:)+colors_type(ceil(type_),:);
%         color_ = color_/2;
    end

    plot(reduction(idxs_thistype,1),reduction(idxs_thistype,2), marker_,...
        'MarkerSize', size_, 'Color', color_)

    ylim([min(reduction(:,2)) max(reduction(:,2))])
    xlim([min(reduction(:,1)) max(reduction(:,1))])
    
    

end
set(gcf,'color',[0.75 0.75 0.75])
axis image
axis off
end
